- Javascript can be used for dynamic interaction for our web page.
- JS it is a scripting language. means suppose you have written 10lines of code and if the error is at 9th line then till line 8 it will get output.
- 3 ways we can print in js.

1. alert()
2. document.write() // our page is treated as object in javascript and we call it as document.
3. innerhtml // <h1>this is innerhtml</h1> the content between the tags.

- Roadmap:
----------
  Basics:
1. js and its features.
2. variables
3. datatypes
4. operators
5. conditional & control statements
6. loops
7. data structures //arrays, maps, sets etc.
8. scopes
9. objects
10. functions
11. form validations
12. DOM manipulation
13. events
14. BOM elements //browser object modal
    advance: 
15. prototyping
16. proto type inheritance
17. call backs
18. IIFE
19. promises
20. Ajax
21. Async await
22. closures
23. OPPs concept
24. JSON

variables
---------
- we cannot define const without initalizing. else it will throw an error  Missing initializer in const declaration.
- using var we can define same variable name n times but cannot with let and const
- let and const have block scope.

data types:
-----------
primitive datatypes means primary data types
primitive datatypes:
- Numbers
- string
- boolean

special:
- undefined
- null

Composite:
- array
- object

- - javascript is a dynamic typed language.

operators:
---------
Arithmetic opeartors
comparison operators
logical operators
assignment operators
type operators
bitwise operators
ternary operators
unary operators (post and pre increment/decrement)

logical operators:
&& operator returns value of the second operand if the first operand evaluates to true
only in case of 0 or empty string '' , it is false 

Bitwise operators:
converts numbers into binary system then performs the operations.

ternary operators:
Three operands --> condition ? expression1 : expression2;

- typecasting or type conversion
- implicit and explicit conversion


types of conditional statements:
1. if statement
2. if-else statement
3. if-else if-else statement
4. switch statement

loops:
to do a task multiple times then we use loops.
loops are also called as iterative statements
1. for loop
2. while loop
3. do-while loop
4. for in loop
5. for of loop

template literals:
- `${}`


for in VS for of loops
-used in iterable data types like strings, arrays, objects in these for every element if we want to iterate over then we use the for..in and for..of loops


arrays:
1. why arrays
2. how to declare arrays
3. how to access arrays elements
4. how to update or add elements to the array
5. methods on arrays


Functions:
what is a function
why functions
how to create functions
how to call functions
what is function expression

types of functions

Scopes in JavaScript
Global scope
Local scope
block level scope

## default and rest parameters

## foreach method

## sets

## objects
- 5 ways we can create objects in javascript
- 1. Object literals
- 2. using a new keyword with object constructor
- 3. using a new keyword with a constructor function
- 4. Object.create() method
- 5. Classes

## console methods

## Dom
- document object model
- by using HTML DOM javascript can access, change or remove any elements of html document and also can create new elements at any position
- document object has properties and methods so by using those we can select/modify/remove/create html elements and we can also add/remove/change styles tp HTML elements.
We have 5 methods to select HTML elements:
1. document.getElementById("idName") --> returns element with the specified id.
2. document.getElementsByClassName('className) --> returns list of all elements belong to the specified class.
3. document.getElementsByTagName("tagName") --> returns list of all elements with the specified tag.
4. document.querySelector(".class/#id/tagName") --> returns the first object matching css style selector.
5. document.querySelectorAll(".class/#id/tagName") --> returns all objects matches the css style selector.

document also has properties few of them are :
1. document.body
2. document.head
3. document.title
4. document.links //anchors
5. document.forms
6. document.images
7. document.scripts

DOM manipulation:
1. how to create HTML elements. //only empty tags will get created with out content ex: <h1></h1>
2. how to set content to element. // we need to set content
3. how to append a new element //then we need to append new element in the tree note: append will add the element at the end.
4. how to insert an element before another element //instead of appending at the end to insert it before another element.
5. how to remove an element //to remove an existing element.
6. how to remove child element // to remove element's child
7. how to replace element // to replace an element.

add/change styles in javascript
1. how to change style of element
2. how to get attribute value of an element
3. how to set/change attribute of an element.

## model windows
- model windows means after opening our web page, upon that a window is opened(model window) once it is opened, without closing it we can not further interact without web page.
-js contains mainly 3 model windows.
1. alert() - to show message to the user
2. prompt() - to take some input from the user
3. confirm() - to get confirmation from the user.

## Events
1. what is event and types of events
2. what is event handler
3. ways to handle events.

# Event:
Event is nothing but an action. 
in webpage also what ever user do is everything is an event.

# who generates an events
user -> keypress, scroll, focus, etc...
system -> load, error, abort, etc...

# types of user generated events:
browser specific events ->  scrollup/down, resize browser.
DOM/ web page specific events -> click, focus, hover.

event listeners and event handlers
#event listener is a function that listens for a specific event and triggers another function(the event handler)when the event occurs.
#event handler is a function that handles (or responds to) a specific event when triggered by an event listener. or event handler is a function we write to run when an event happens.
 
types of events:
# mouse events:
click, double click, mouseover, mouseout, mouse move

# keyboard events:
key down, key up, key press

# focus events:
focus, blur, focusin, focusou

# form events:
submit, reset, change


### 3 ways to handle events.
1. inline event handlers(using the event attribute in html)
EX: <button onclick="js code">

# for all the above events if we add on at starting then its called event listeners

2. using event properties in JS.
EX: let btn = document.getElementById("b1)
    btn.onclick = function name/anonymous function

3. using addEventListener() method in JS
EX: let btn = document.getElementById("b1)
    btn.addEventListener(eventName, function/anonymous fun)


## settimeout and settimeinterval() functions

var a = setTimeout(
        function (name) {
          alert("Hellooo! " + name);
          console.log("Hellooo! after timeout");
        },
        5000,
        "zaheer"
      );

a stores the id of the function
and we cancel the function execution without executing after a particular time by using
clearInterval(a)


## map() method:
- it is related to arrays method. 
- it is used for modify already existing array data and create's a new array with modified data we can use map() method.

## filter() method:

## reduce() method:
- it is also used for arrays.
- array.reduce(function, accumulator or default value)
- function can take 4 arguments.
- function(accumulator value, element, index, array)  //accumulator is a first argument.
- array.reduce(function(acc, elem, index, array){}, 8)
- this method returns a single value.
// reduce method will iterate over the array and calls the function for each element and compares with accumulator and so on..


## array methods: 
- find() method
- some() method
- every() method
these are callback functions

## spread operator:


## form validation

## callback functions

## higher Order Functions

## closure

## this keyword
- function is different and method is different that is if we define a function in an object then that is called as method.


## call,apply,bind methods 

## optional chaining 

## date object

## math object
- sign()
- abs()
- sqrt()
- pow()
- max()
- min()
- round()
- ceil()
- floor()
- trunc()
- random()
- exp()
- log2()
- log10()

## string methods
charAt()
indexOf()
lastIndexOf()
toLowerCase() 
toUpperCase() 
concat()
trim()
split() 
startsWith() 
endsWith()
slice()
substring() 
substr()
includes()
charCodeAt()
repeat() 
replace()

##  wuindow object
- document
- innerWidth
- outerWidth
- innerHeight
- outerHeight
- location
- closed
- name
- navigator

## window.open()  and window.close() methods

## moveTo() and moveBy() and reSizeTo() and reSizeBy() methods

## asynchronous javascript

## AJAX
- AJAX - Asynchronous javascript and XML :)
- AJAX helps in fetching data asynchronously from remote webserver [helps to display the data dynamically in our web page.]
- data loaded by ajax call is done by asynchronously without page refresh.
- web server will send response which contains data that we have requested.
- data can be of any formats like JSON,XML.
- initially servers used to send data in XML format.

- in javascript, we have to use XMLHttpRequest object to make the AJAX call to exchange data from webserver.
- AJAX request can be send to server in with 3 steps:
1. create XMLHttpRequest object
    EX: let xhr = new XMLHttpRequest();
2. create request with that object open() method
    EX: syntax: open(method[post/get], url, async[true/false], username, password); //async if you give as true then below code will get executed else holds till reponse we receive. and username and password are optional based on endpoint.
3. send the request using send() method.

<!-- methods -->
- With the help of Ajax, instead of reloading page, only required portion we can update it.

- send() method, if we won't pass parameters then it takes GET method. 

- send(string), sends the request to the server used for POST requests.

- setRequestHeader() -> adds a label/value pairs of the headers to be sent.

- abort() -> cancel the current request.

- getAllresponseHeaders() -> returns header information.

- getResponseHeaders() -> returns specific header information.

<!-- porperties -->
- onLoad --> when the request is complete and the response is fully downloaded

- onReadyStateChange --> defines a function to be called when the readystate property changes.

- onProgress --> triggers periodically while the response is being downloaded, reports how much has been downloaded.

- readyState --> holds the status of the XMLHttpRequest.
0. request not initialized
1. server connection established
2. request received
3. processing request
4. request finished and response is ready.

- responseText --> returns the response data as a string

- responseXML --> returns the response data as XML data.

- status --> returns the status number of the request 200 ok, 404 not found.

- statusText --> returns teh status text (ok or not found)

## callback hell 

## promise 

## fetch API

## asynce and await.

## ErrorHandling try and catch.

## prototype vs __proto__

## destructuring

## strict mode

## regular expressions

## debugging

## async vs defer in script tag.
. <script src="script1.js"></script> in head tag if we add this script tag, js will stop parsing html until js script loaded and executed successfully then only it will parse html. till that if we have any html elements which we need in js scripts then if it is not available then we'll get an error.
Ex: Cannot read properties of null (reading 'innerText')

- so avoid this we can use two keywords, so that it will continue the html parsing even it is loading the script or executing the script.
1. async and
2. differ

- differ means:  <script differ src="script1.js"></script> while loading this script1.js html parsing should not required to stop, it will tell to engine. and the script will execute only after html parsing is done.

- async means: downlaoding of script will be done parallel with html parsing, but execution should be done once the script is loaded/downlaoded.

in normal script tag <script here it wont work> js code. </script>

## == vs ===

## recursion

## pure and impure functions

## Currying

## Pass by value vs pass by reference, call by value vs reference

## JSON

## JSON vs Javascript Object

## DOM Events:
# mouse Events:
- onclick: The event occurs when the user clicks on an element.
- oncontextmenu: User right-clicks on an element to open a context menu.
- ondblclick: The user double clicks on an element
- onmousedown: user presses a mouse button over an element.
- onmouseleave: pointer moves out of an element
- onmousemove: the pointer is moving while it is over an element
- onmouseup: the user releases a mouse button while over an element.

# keyboard events:
- onkeydown: when the user is pressing a key down.
- onkeypress: the movement the user starts pressing a key.
- onkeyup: the user releases a key.

# form events:
- onblur: When an element loses focus
- onchange: The content of a form element changes
- onfocus: An element gets focus
- onfocusin: When an element is about to get focus
- onfocusout: The element is about to lose focus
- oninput: User input on an element
- oninvalid: when a form element is invalid
- onreset: when a form is reset
- onsearch: when user writes something in a search field (for <input="search">)
- onselect: when the user selects some text
- onsubmit: when a form is submitted

# Clipboard Events
- oncopy - User copies the content of an element
- oncut - The user cuts an element's content
- onpaste - A user pastes the content in an element

# Drag Events
- ondrag: An element is dragged
- ondragend : The user has finished dragging the element
- ondragenter: The dragged element enters a drop target
- ondragleave: A dragged element leaves the drop target
- ondragover: The dragged element is on top of the drop target
- ondragstart: User starts to drag an element
- ondrop Dragged element is dropped on the drop target


## classes:

## getters and setters

## inheritance in classes

## memorization

## arrow functions

## callback functions

## local storage and session storage

## splice() vs slice()

## JSON stringify() and parse() methods

## shallow copying and deep copying

## multi dimensional arrays

## Ajax,fetch,async await,promises

## Array flattening

## Array sorting

## when to use . or [] while accessing the object properties.

## event  vs event.target vs this

## geo location API

## Different ways of event handling in a webpage

## remove events, or event listeners

## ways to find an element in an array.

## shuffle arrays

## filter array of objects

## sort array of objects

## split and join methods 

## event loop.

## Execution context:
- js engine is responsible for executing(running) our code.
- Execution context is nothing but an env where our code is stored to execute
- Execution context created in 2 scenarios.
1. once for whole js code. //(global execution context)
2. and when ever a function is called in program, another new execution env will be created.(function execution context)

- when ever execution context is created it has 2 components
1. memory component // it allows or allocates the memory
2. code component // code.

- execution context has 2 phases
1. creation memory //initially it creates a memory and assigns undefined
2. execution phase // assigns the values

- once it encounters any function calls, then it creates a new function execution context for that function.
same again 
1. memory component // it allows or allocates the memory
also creates a arguments property and length property. and it si only for  function execution context
2. code component // code.

and call stack will store the call and executes it.
